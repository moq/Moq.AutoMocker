using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace Moq.AutoMock.Tests
{
    [TestClass]
    public class DescribeExtractingObjects
    {
        [TestMethod]
        public void It_extracts_instances_that_were_placed_with_Use()
        {
            var mocker = new AutoMocker();
            var setupInstance = Mock.Of<IService1>();
            mocker.Use(setupInstance);

            var actualInstance = mocker.Get<IService1>();
            Assert.AreSame(setupInstance, actualInstance);
        }

        [TestMethod]
        public void It_extracts_instances_that_were_setup_with_Use()
        {
            var mocker = new AutoMocker();
#pragma warning disable CA1820 // Test for empty strings using string length
            mocker.Use<IService1>(x => x.ToString() == "");
#pragma warning restore CA1820 // Test for empty strings using string length
                              
            // Assert does not throw
            mocker.GetMock<IService1>();
        }

        [TestMethod]
        public void It_creates_a_mock_if_the_object_is_missing()
        {
            var mocker = new AutoMocker();
            var mock = mocker.GetMock<IService1>();
            Assert.IsNotNull(mock);
        }

        [TestMethod]
        public void It_creates_a_mock_if_the_object_is_missing_using_Get()
        {
            var mocker = new AutoMocker();
            var mock = mocker.Get<IService1>();
            Assert.IsNotNull(mock);
        }

        [TestMethod]
        public void Mocks_that_were_autogenerated_can_be_extracted()
        {
            var mocker = new AutoMocker();
            mocker.CreateInstance<WithService>();
            var actualInstance = mocker.Get<IService2>();
            Assert.IsNotNull(actualInstance);
        }

        [TestMethod]
        public void ExtractMock_throws_ArgumentException_when_object_is_not_A_mock()
        {
            var mocker = new AutoMocker();
            mocker.Use<IService2>(new Service2());
            Assert.ThrowsException<ArgumentException>(() => mocker.GetMock<IService2>());
        }
    }
}
