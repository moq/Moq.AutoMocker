using Microsoft.CodeAnalysis.Text;
using System.Text;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using VerifyCS = Moq.AutoMocker.Generators.Tests.CSharpSourceGeneratorVerifier<Moq.AutoMocker.Generators.OptionsExtensionSourceGenerator>;
using Microsoft.CodeAnalysis.Testing;


namespace Moq.AutoMocker.Generators.Tests;

[TestClass]
public class OptionsGeneratorTests
{
    private const string ExpectedOptionsGeneratedFile = """
        // Generated by Moq.AutoMocker.Generators.OptionsExtensionSourceGenerator.
        // Licensed under the MIT License. See LICENSE in the project root for license information.
        namespace Moq.AutoMock
        {
            using Microsoft.Extensions.Options;

            /// <summary>
            /// This class provides extension methods for interacting with IOptions in an <see cref="AutoMocker"/> instance.
            /// </summary>
            public static class AutoMockerOptionsExtensions
            {
                /// <summary>
                ///  This method sets up <see cref="AutoMocker"/> with various option related services for Microsoft's Option pattern, and allows their interception and manipulation in testing scenarios.
                /// </summary>
                /// <param name="mocker">The <see cref="AutoMocker"/> instance.</param>
                /// <param name="configure">A delegate that can be used to configure an option instance of type TClass.</param>
                /// <typeparam name="TClass">The type of Options being configured.</typeparam>
                /// <returns>The same <see cref="AutoMocker"/> instance passed as parameter, allowing chained calls.</returns>
                public static AutoMocker WithOptions<TClass>(this AutoMocker mocker, Action<TClass>? configure = null)
                    where TClass : class, new()
                {
                    if (mocker == null)
                    {
                        throw new ArgumentNullException(nameof(mocker));
                    }

                    mocker.Use<IEnumerable<IConfigureOptions<TClass>>>(new[] { new ConfigureOptions<TClass>(configure) });
                    mocker.With<IOptionsMonitorCache<TClass>, OptionsCache<TClass>>();
                    mocker.With<IOptionsFactory<TClass>, OptionsFactory<TClass>>();
                    mocker.With<IOptionsMonitor<TClass>, OptionsMonitor<TClass>>();
                    mocker.With<IOptionsSnapshot<TClass>, OptionsManager<TClass>>();
                    TClass options = mocker.Get<IOptionsFactory<TClass>>().Create(string.Empty);
                    mocker.Use(Options.Create(options));
                    mocker.Use(options);
                    return mocker;
                }
            }
        }
        """;

    [TestMethod]
    public async Task WhenOptionsAbstractionAssemblyIsNotReferenced_NoGenerationOccurs()
    {
        await new VerifyCS.Test
        {
            TestCode = "",
            ReferenceOptionsAbstractions = false

        }.RunAsync();
    }

    [TestMethod]
    public async Task WhenOptionsAbstractionAssemblyIsReferenced_ExtensionMethodIsGenerated()
    {
        await new VerifyCS.Test
        {
            CompilerDiagnostics = CompilerDiagnostics.None,
            ReferenceOptionsAbstractions = true,
            TestCode = "",
            TestState =
            {
                GeneratedSources =
                {
                    GetSourceFile(ExpectedOptionsGeneratedFile, "AutoMockerOptionsExtensions.cs")
                }
            }

        }.RunAsync();
    }

    private static (string FileName, SourceText SourceText) GetSourceFile(string content, string fileName)
    {
        return (Path.Combine("Moq.AutoMocker.Generators", "Moq.AutoMocker.Generators.OptionsExtensionSourceGenerator", fileName), SourceText.From(content, Encoding.UTF8));
    }
}
