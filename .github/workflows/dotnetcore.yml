name: Continuous

on:
  # PRs will be built, and a package posted to GH Packages
  pull_request:
  
  push:
    paths:
    - '!README.md'
    - '!docs/**'

    # We'll build, pack, and push a pre-release to NuGet on master
    branches: [ master ]

    # Tagging with v* will build that version number and push a release to Nuget
    #   e.g. v1.2, v3.4.5, etc.
    tags:
    - 'v*'

defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.404

  # Run unit tests
    - name: Test
      run: dotnet test --configuration Release --verbosity normal

  # Set build properties
    - name: Set build version
      run: |
        <# If we're a tag, force VersionPrefix to the tag value #>
        if ('${{ github.ref }}' -match '^refs/tags/v') {
          if ($match = [regex]::Match('${{ github.ref }}', '^refs/tags/v([0-9]+(\.[0-9]+){1,2})') -and $match.Success) {
            Add-Content "VersionPrefix=$($match.Groups[1].Value)" $env:GITHUB_ENV -Encoding utf8
          } else {
            throw 'Invalid tag version: ${{ github.ref }}'
          }
        }
        else {
          <# All other pushes get a CI suffix #>
          Add-Content 'VersionSuffix=ci' $env:GITHUB_ENV -Encoding utf8
        }

        <# Every build should have the revision set #>
        Add-Content 'Revision=${{ github.run_number }}' $env:GITHUB_ENV -Encoding utf8

        Get-Content $env:GITHUB_ENV | Out-Host


  # Package Release
    - name: Pack
      run: |
        Write-Host "${{ env.VersionPrefix }}.${{ env.Revision }}-${{ env.VersionSuffix }}"
        dotnet pack --configuration Release --verbosity normal --output .

  # Publish to NuGet and GitHub Packages
    - name: Publish
      if: github.event_name == 'push'
      run: |
        dotnet nuget push *.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_TOKEN }} --skip-duplicate

        dotnet new nugetconfig
        dotnet nuget add source `
          --name 'github' `
          --username '${{ github.actor }}' `
          --password '${{ github.token }}' `
          --configfile 'nuget.config' 'https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json'
        dotnet nuget push *.nupkg --source "github"
